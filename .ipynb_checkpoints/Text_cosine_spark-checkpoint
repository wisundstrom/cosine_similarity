{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import pyspark\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from pyspark.sql import SparkSession\n",
    "import pyspark.sql.types as t\n",
    "import pyspark.sql.functions as f\n",
    "from pyspark.ml.feature import HashingTF, IDF, RegexTokenizer, NGram\n",
    "from pyspark.ml.linalg import *\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "\n",
    "import string as st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc = SparkSession.builder.getOrCreate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "email_list = pd.read_pickle(\"email_list\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "label = np.random.randint(1,5, size=len(email_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(zip(email_list,label), columns = ['email','label'])\n",
    "names = df['email'].sample(frac = 1, replace = True).reset_index(drop=True)\n",
    "df['names']=names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>email</th>\n",
       "      <th>label</th>\n",
       "      <th>names</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>rian.rabe@oceanenergy.com</td>\n",
       "      <td>3</td>\n",
       "      <td>jhs40@home.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BMahaffay@aol.com</td>\n",
       "      <td>4</td>\n",
       "      <td>lesliedoggett@hotmail.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>maria.sandoval@enron.com</td>\n",
       "      <td>1</td>\n",
       "      <td>david.karr@enron.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TOMSKILLJR@aol.com</td>\n",
       "      <td>4</td>\n",
       "      <td>rhonda_henry@agfg.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>julie.willner@goodyhair.com</td>\n",
       "      <td>2</td>\n",
       "      <td>jglass@mmind.net</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5353</th>\n",
       "      <td>carrie.robert@enron.com</td>\n",
       "      <td>4</td>\n",
       "      <td>danny.mccarty@enron.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5354</th>\n",
       "      <td>casteel@nbtx.com</td>\n",
       "      <td>2</td>\n",
       "      <td>chetan.paipanandiker@enron.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5355</th>\n",
       "      <td>lawrence.ciscon@enron.com</td>\n",
       "      <td>3</td>\n",
       "      <td>a..roberts@enron.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5356</th>\n",
       "      <td>terrie_james@enron.net</td>\n",
       "      <td>3</td>\n",
       "      <td>drew.deberry@usda.gov</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5357</th>\n",
       "      <td>frank.hayden@enron.com</td>\n",
       "      <td>1</td>\n",
       "      <td>ronald.m.williams@accenture.com</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5358 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            email  label                            names\n",
       "0       rian.rabe@oceanenergy.com      3                   jhs40@home.com\n",
       "1               BMahaffay@aol.com      4        lesliedoggett@hotmail.com\n",
       "2        maria.sandoval@enron.com      1             david.karr@enron.com\n",
       "3              TOMSKILLJR@aol.com      4            rhonda_henry@agfg.com\n",
       "4     julie.willner@goodyhair.com      2                 jglass@mmind.net\n",
       "...                           ...    ...                              ...\n",
       "5353      carrie.robert@enron.com      4          danny.mccarty@enron.com\n",
       "5354             casteel@nbtx.com      2   chetan.paipanandiker@enron.com\n",
       "5355    lawrence.ciscon@enron.com      3             a..roberts@enron.com\n",
       "5356       terrie_james@enron.net      3            drew.deberry@usda.gov\n",
       "5357       frank.hayden@enron.com      1  ronald.m.williams@accenture.com\n",
       "\n",
       "[5358 rows x 3 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "email_df = sc.createDataFrame(df, schema = ['email','label','names'] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "74"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check number of symbols/ngrams in set of strings\n",
    "vectorizer = CountVectorizer(analyzer='char', lowercase=False, ngram_range=(1,1))\n",
    "vectorizer = vectorizer.fit(email_list)\n",
    "symbols = vectorizer.get_feature_names()\n",
    "len(symbols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def vectorize_string_cols(df, cols):\n",
    "    other_cols = list(set(df.columns) - set(cols)) \n",
    "    for col in cols:\n",
    "        \n",
    "        # if we wanted to try to improve the peformance of cosine sim,\n",
    "        # spark.ml.feature.NGram can be used between tokenizer and TF\n",
    "        tokenizer = RegexTokenizer(inputCol=f\"{col}\", outputCol=f\"{col}_chars\", gaps=False, pattern=\".\" )\n",
    "        charData = tokenizer.transform(df)\n",
    "        \n",
    "        # this uses a hash function instead of the standard count vectorization\n",
    "        # in general, if the load factor (num_symbols/num_features) is very small\n",
    "        # the expected number of hash collisions is small, and so the hashing tf \n",
    "        # should be very similar to the countVectorizer.\n",
    "        # as load factor increases, the number of symbols hashed to the same number\n",
    "        # will increase, but we could possibly use this to increase performance \n",
    "        # if the number of features gets too large\n",
    "        # the hashing algorithm works best when features is a power of 2\n",
    "        \n",
    "        hashingTF = HashingTF(inputCol=f\"{col}_chars\", outputCol=f\"{col}_rawFeatures\", numFeatures=2**7)\n",
    "        featurizedData = hashingTF.transform(charData)\n",
    "        \n",
    "        # not 100% sure about this, but it was in the documentation. it might help\n",
    "        # with the fact that idfModel makes two passes over the data.\n",
    "        featurizedData.cache()\n",
    "        \n",
    "        idf = IDF(inputCol=f\"{col}_rawFeatures\", outputCol=f\"{col}_vec\")\n",
    "        idfModel = idf.fit(featurizedData)\n",
    "        df = idfModel.transform(featurizedData)\n",
    "    \n",
    "    new_columns =[f\"{col}_vec\" for col in cols]\n",
    "    all_cols = cols+other_cols+new_columns\n",
    "    vectorized = df.select(all_cols)\n",
    "    return vectorized"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "vectorized = vectorize_string_cols(email_df, ['email','names'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+--------------------+-----+--------------------+--------------------+\n",
      "|               email|               names|label|           email_vec|           names_vec|\n",
      "+--------------------+--------------------+-----+--------------------+--------------------+\n",
      "|rian.rabe@oceanen...|      jhs40@home.com|    3|(128,[0,7,26,49,6...|(128,[0,22,26,35,...|\n",
      "|   BMahaffay@aol.com|lesliedoggett@hot...|    4|(128,[0,26,54,65,...|(128,[0,6,26,49,5...|\n",
      "|maria.sandoval@en...|david.karr@enron.com|    1|(128,[0,6,7,26,54...|(128,[0,6,7,26,64...|\n",
      "|  TOMSKILLJR@aol.com|rhonda_henry@agfg...|    4|(128,[0,26,54,64,...|(128,[0,6,7,26,49...|\n",
      "|julie.willner@goo...|    jglass@mmind.net|    2|(128,[0,6,7,26,49...|(128,[0,6,7,49,54...|\n",
      "+--------------------+--------------------+-----+--------------------+--------------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "vectorized.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "@f.udf(t.FloatType())\n",
    "def vect_cosine(col):\n",
    "    num_rows = len(col)\n",
    "    num_entries = (num_rows * (num_rows -1))/2\n",
    "    if num_rows >= 10:\n",
    "        \n",
    "#         array_col = list(map(lambda x: x.toArray(), col))\n",
    "\n",
    "        cosines = cosine_similarity(col)\n",
    "        cosines = np.triu(cosines, k=1)\n",
    "        \n",
    "        return float(np.sum(cosines)/num_entries)\n",
    "    \n",
    "    else:\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = vectorized.groupBy(\"label\").agg(\n",
    "    vect_cosine(f.collect_list(\"email_vec\")),\n",
    "    vect_cosine(f.collect_list(\"names_vec\"))\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+------------------------------------------+------------------------------------------+\n",
      "|label|vect_cosine(collect_list(email_vec, 0, 0))|vect_cosine(collect_list(names_vec, 0, 0))|\n",
      "+-----+------------------------------------------+------------------------------------------+\n",
      "|    1|                                0.24431038|                                0.25086948|\n",
      "|    3|                                0.24200837|                                0.23898523|\n",
      "|    2|                                0.23729812|                                0.24441099|\n",
      "|    4|                                0.23789877|                                 0.2394096|\n",
      "+-----+------------------------------------------+------------------------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "result.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
