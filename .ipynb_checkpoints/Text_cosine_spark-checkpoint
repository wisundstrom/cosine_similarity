{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import pyspark\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from pyspark.sql import SparkSession\n",
    "import pyspark.sql.types as t\n",
    "import pyspark.sql.functions as f\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import string as st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc = SparkSession.builder.getOrCreate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "email_list = pd.read_pickle(\"email_list\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### This code defines a udf that takes in a column of strings and returns the average cosine similarity of the strings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "@f.udf(t.FloatType())\n",
    "def text_cosine(col):\n",
    "    num_rows = len(col)\n",
    "    num_entries = (num_rows * (num_rows -1))/2\n",
    "    if num_rows >= 10:\n",
    "        \n",
    "        vectorizer = TfidfVectorizer(analyzer = \"char\", lowercase=False)\n",
    "        vectors = vectorizer.fit_transform(col)\n",
    "        cosines = cosine_similarity(vectors)\n",
    "        cosines = np.triu(cosines, k=1)\n",
    "        \n",
    "        return float(cosines.sum() / num_entries)\n",
    "    \n",
    "    else:\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "label = np.random.randint(1,5, size=len(email_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(zip(email_list,label), columns = ['email','label'])\n",
    "names = df['email'].sample(frac = 1, replace = True).reset_index(drop=True)\n",
    "df['names']=names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>email</th>\n",
       "      <th>label</th>\n",
       "      <th>names</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ted.bland@enron.com</td>\n",
       "      <td>4</td>\n",
       "      <td>ochambe@cisco.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>carlos.ruiz@enron.com</td>\n",
       "      <td>1</td>\n",
       "      <td>msmith@gtis.net</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>mccluney.james@enron.com</td>\n",
       "      <td>4</td>\n",
       "      <td>perfmgmt@enron.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tore_myrholt@mckinsey.com</td>\n",
       "      <td>1</td>\n",
       "      <td>fcaspersen@knickerbockermgt.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>larry_heard@transwestern.net</td>\n",
       "      <td>2</td>\n",
       "      <td>julie.cobb@enron.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5353</th>\n",
       "      <td>andrews@boxerproperty.com</td>\n",
       "      <td>2</td>\n",
       "      <td>ed.mcmichael@enron.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5354</th>\n",
       "      <td>terry.west@enron.com</td>\n",
       "      <td>2</td>\n",
       "      <td>Jeff_Hines@hines.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5355</th>\n",
       "      <td>dhoornstra@uspi.com</td>\n",
       "      <td>4</td>\n",
       "      <td>amy.cavazos@enron.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5356</th>\n",
       "      <td>Hector.Campos@ENRON.com</td>\n",
       "      <td>1</td>\n",
       "      <td>IMCEANOTES-John+20Sodergreen+20+3Cjohns+40scud...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5357</th>\n",
       "      <td>sherri.sear@enron.com</td>\n",
       "      <td>3</td>\n",
       "      <td>IMCEANOTES-+3CiPayit+40Enron+2Ecom+3E+40ENRON@...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5358 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             email  label  \\\n",
       "0              ted.bland@enron.com      4   \n",
       "1            carlos.ruiz@enron.com      1   \n",
       "2         mccluney.james@enron.com      4   \n",
       "3        tore_myrholt@mckinsey.com      1   \n",
       "4     larry_heard@transwestern.net      2   \n",
       "...                            ...    ...   \n",
       "5353     andrews@boxerproperty.com      2   \n",
       "5354          terry.west@enron.com      2   \n",
       "5355           dhoornstra@uspi.com      4   \n",
       "5356       Hector.Campos@ENRON.com      1   \n",
       "5357         sherri.sear@enron.com      3   \n",
       "\n",
       "                                                  names  \n",
       "0                                     ochambe@cisco.com  \n",
       "1                                       msmith@gtis.net  \n",
       "2                                    perfmgmt@enron.com  \n",
       "3                       fcaspersen@knickerbockermgt.com  \n",
       "4                                  julie.cobb@enron.com  \n",
       "...                                                 ...  \n",
       "5353                             ed.mcmichael@enron.com  \n",
       "5354                               Jeff_Hines@hines.com  \n",
       "5355                              amy.cavazos@enron.com  \n",
       "5356  IMCEANOTES-John+20Sodergreen+20+3Cjohns+40scud...  \n",
       "5357  IMCEANOTES-+3CiPayit+40Enron+2Ecom+3E+40ENRON@...  \n",
       "\n",
       "[5358 rows x 3 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "email_df = sc.createDataFrame(df, schema = ['email','label','names'] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "StructType(List(StructField(email,StringType,true),StructField(label,LongType,true),StructField(names,StringType,true)))"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "email_df.schema"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = email_df.groupBy(\"label\").agg(\n",
    "    text_cosine(f.collect_list(\"email\")),\n",
    "    text_cosine(f.collect_list(\"names\"))\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+--------------------------------------+--------------------------------------+\n",
      "|label|text_cosine(collect_list(email, 0, 0))|text_cosine(collect_list(names, 0, 0))|\n",
      "+-----+--------------------------------------+--------------------------------------+\n",
      "|    1|                            0.45806172|                             0.4585806|\n",
      "|    3|                            0.44925573|                             0.4704736|\n",
      "|    2|                             0.4609185|                             0.4476878|\n",
      "|    4|                             0.4545317|                             0.4571612|\n",
      "+-----+--------------------------------------+--------------------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "result.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### This is a helper function for changing mapping in the cosine similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "def token_mapper(list_of_string, dictionary):\n",
    "    str1 = [''.join(str(e) for e in list(map(dictionary.get, string))) for string in list_of_string] \n",
    "    return str(str1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "@f.udf(t.FloatType())\n",
    "def text_cosine2(col):\n",
    "    num_rows = len(col)\n",
    "    num_entries = (num_rows * (num_rows -1))/2\n",
    "    if num_rows >= 10:\n",
    "        \n",
    "        vectorizer1 = TfidfVectorizer(analyzer = \"char\", lowercase=False)\n",
    "        vectorizer1 = vectorizer1.fit(col)\n",
    "        alphabet = vectorizer1.get_feature_names()\n",
    "        \n",
    "        alphabet2 = {}\n",
    "        for char in alphabet:\n",
    "            if char in st.ascii_lowercase:\n",
    "                alphabet2[char]=0\n",
    "            elif char in st.ascii_uppercase:\n",
    "                alphabet2[char]=1\n",
    "            elif char in st.digits:\n",
    "                alphabet2[char]=2\n",
    "            else:\n",
    "                alphabet2[char]=3\n",
    "\n",
    "        mapped = [token_mapper(string, alphabet2) for string in col]\n",
    "        \n",
    "        vectorizer2 = TfidfVectorizer(analyzer=\"char\", ngram_range=(2,4), lowercase=False)\n",
    "        vectors = vectorizer2.fit_transform(mapped)\n",
    "        cosines = cosine_similarity(vectors)\n",
    "        cosines = np.triu(cosines, k=1)\n",
    "        \n",
    "        return float(cosines.sum() / num_entries)\n",
    "    \n",
    "    else:\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = email_df.groupBy(\"label\").agg(\n",
    "    text_cosine2(f.collect_list(\"email\")),\n",
    "    text_cosine2(f.collect_list(\"names\"))\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+---------------------------------------+---------------------------------------+\n",
      "|label|text_cosine2(collect_list(email, 0, 0))|text_cosine2(collect_list(names, 0, 0))|\n",
      "+-----+---------------------------------------+---------------------------------------+\n",
      "|    1|                               0.930034|                              0.9296541|\n",
      "|    3|                               0.928316|                             0.93590695|\n",
      "|    2|                              0.9293784|                              0.9219228|\n",
      "|    4|                             0.92377895|                              0.9288583|\n",
      "+-----+---------------------------------------+---------------------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "result.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
